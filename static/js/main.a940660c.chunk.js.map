{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search/search.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAGe,SAASA,EAAKC,GAC3B,OACE,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAI,WACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEL,mCAAOL,EAAMI,QAAQE,KAArB,OACA,kCAAMN,EAAMI,QAAQG,Y,MCPX,SAASC,EAASR,GAE/B,OACE,qBAAKC,UAAY,YAAjB,SAEID,EAAMS,SAASC,KAAK,SAAAN,GAAO,OACzB,cAACL,EAAD,CAAuBK,QAASA,GAArBA,EAAQC,S,UCNhBM,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,uBACEZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAYF,KCJKG,G,wDACnB,WAAYhB,GAAQ,IAAD,8BACjB,cAAMA,IAeRa,aAAe,SAACI,GACd,EAAKC,SAAU,CAAEC,YAAaF,EAAEG,OAAOC,SAdvC,EAAKC,MAAQ,CACVb,SAAU,GACVU,YAAa,IALC,E,qDASnB,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAE1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,oBAO7C,WACE,MAAkCC,KAAKN,MAA/Bb,EAAR,EAAQA,SAAUU,EAAlB,EAAkBA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC9CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAElD,OACE,sBAAK9B,UAAU,MAAf,UACE,oDACA,cAAC,EAAD,CACEW,YAAY,iBACZC,aAAgBe,KAAKf,eAEvB,cAACL,EAAD,CAAUC,SAAWoB,W,GAjCII,cCOlBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a940660c.chunk.js","sourcesContent":["import React from 'react';\nimport './card-style.css';\n\nexport default function Card(props) {\n  return (\n    <div className=\"card-container\">\n      <img \n        alt='monsters'\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n      />\n      <h2> { props.monster.name } </h2> \n      <p> { props.monster.email }</p>\n    </div>\n  )\n}\n","import React from 'react';\nimport Card from '../card/card.component'\nimport './card-list.style.css';\n\nexport default function CardList(props) {\n  // console.log(props);\n  return (\n    <div className = \"card-list\">\n      { \n        props.monsters.map( monster => \n          <Card key={monster.id} monster={monster} />\n        )\n      }\n    </div>\n  )\n}\n\n","import React from 'react';\nimport './search.style.css';\n\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n  <input \n    className='search'\n    type='search'\n    placeholder={placeholder} \n    onChange = {handleChange}\n  />  \n)\n","import React, { Component } from 'react';\nimport CardList from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search/search.component';\nimport './App.css';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n       monsters: [],\n       searchField: ''\n    }\n  }\n  \n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      // .then(users => console.log(users))\n      .then(users => this.setState({ monsters: users }))\n  }\n\n  handleChange = (e) => {\n    this.setState( { searchField: e.target.value })\n   };\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\" >\n        <h1>Monster's Rollodex</h1>\n        <SearchBox \n          placeholder=\"search monster\"\n          handleChange = {this.handleChange}\n        />\n        <CardList monsters= {filteredMonsters} />\n      </div>\n    )\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}